"""Internal utilities for suites"""


class GetCheckTypeException(Exception):
    """Raised when a incorrect type is found"""


_to_toml_type = {
    bool: "boolean",
    float: "float",
    int: "integer",
    list: "array",
    str: "string",
}


def get_and_check(d, key, field_type, item_type=None, default=None):
    """
    Gets a value from a dictionary and checks its value.
    Intended for use with TOML generated dictionaries.

    Args:
        d (dict): Dictionary generated by `toml`.
        key (str): Name of the field.
        field_type (type): The field's type. Only supports `bool`, `float`,
            `int`, `list`, `str`, where `list` if for arrays.
        item_type (type): Type of value inside a list. Only used if
            `field_type` is `list`.
        default: Optional default value if the field is not found.

    Returns:
        The value if it exists and is of the correct type, and `None` if the
        key is not found in the dictionary.

    Raises:
        GetCheckTypeException: If the field does not match its type.
    """
    value = d.get(key)
    if value is not None:
        if type(value) != field_type:
            raise GetCheckTypeException(
                'The "{}" field must be of type {}'.format(
                    key,
                    _to_toml_type[field_type],
                )
            )
        elif field_type == list and len(value) > 0 and type(value[0]) != item_type:
            raise GetCheckTypeException(
                'The "{}" field\'s items must be of type {}'.format(
                    key,
                    _to_toml_type[item_type],
                )
            )
    elif default is not None:
        value = default
    return value
